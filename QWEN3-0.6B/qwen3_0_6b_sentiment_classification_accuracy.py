# -*- coding: utf-8 -*-
"""Qwen3-0.6B sentiment classification accuracy.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1zUBv2T_mZvISPj-D_5ooeYgaIGPXyEvN
"""

!pip install transformers datasets sentence-transformers torch sae-lens

!pip install sae-lens transformer_lens transformers datasets torch matplotlib scikit-learn

from transformers import AutoModelForCausalLM, AutoTokenizer
from datasets import load_dataset
import torch
from tqdm import tqdm

device = "cuda" if torch.cuda.is_available() else "cpu"
model_name = "Qwen/Qwen3-0.6B"

tokenizer = AutoTokenizer.from_pretrained(model_name)
model = AutoModelForCausalLM.from_pretrained(model_name, torch_dtype="auto", device_map="auto")

# SST-2 validation split for testing classification accuracy
dataset = load_dataset("glue", "sst2", split="validation")

label_map = {0: "negative", 1: "positive"}

def prompt_for_sentiment(sentence):
    return f"Sentence: \"{sentence}\"\nWhat is the sentiment? Answer with 'positive' or 'negative':"

correct = 0
total = 0

model.eval()
with torch.no_grad():
    for example in tqdm(dataset):
        prompt = prompt_for_sentiment(example["sentence"])
        messages = [{"role": "user", "content": prompt}]
        # Apply Qwen chat template with thinking enabled as in your example
        text = tokenizer.apply_chat_template(
            messages,
            tokenize=False,
            add_generation_prompt=True,
            enable_thinking=True
        )
        inputs = tokenizer([text], return_tensors="pt").to(model.device)
        gen_ids = model.generate(
            **inputs,
            max_new_tokens=32,
            do_sample=False
        )
        output_ids = gen_ids[0][len(inputs.input_ids[0]):].tolist()
        # Try to split out thinking content if present
        try:
            idx = len(output_ids) - output_ids[::-1].index(151668)
        except ValueError:
            idx = 0
        generated_text = tokenizer.decode(output_ids[idx:], skip_special_tokens=True).strip().lower()

        # Decide predicted label
        pred_label = None
        for label_str, label_id in (("positive",1), ("negative",0)):
            if label_str in generated_text:
                pred_label = label_id
                break
        if pred_label is None:
            # fallback: treat as incorrect
            pred_label = -1

        if pred_label == example["label"]:
            correct += 1
        total += 1

accuracy = correct / total
print(f"\nSentiment Classification Accuracy with Qwen3-0.6B generation approach: {accuracy*100:.2f}%")